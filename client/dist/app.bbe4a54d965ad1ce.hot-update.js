"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateapp"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/fields/collaborative-editor/CollaborativeEditor2.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/fields/collaborative-editor/CollaborativeEditor2.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_string_replace_all_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.replace-all.js */ \"./node_modules/core-js/modules/es.string.replace-all.js\");\n/* harmony import */ var core_js_modules_es_string_replace_all_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_all_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _TextVersioning_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextVersioning.vue */ \"./src/adc-core/fields/collaborative-editor/TextVersioning.vue\");\n/* harmony import */ var reconnectingwebsocket__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reconnectingwebsocket */ \"./node_modules/reconnectingwebsocket/reconnecting-websocket.js\");\n/* harmony import */ var reconnectingwebsocket__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(reconnectingwebsocket__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var sharedb_lib_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sharedb/lib/client */ \"./node_modules/sharedb/lib/client/index.js\");\n/* harmony import */ var quill__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! quill */ \"./node_modules/quill/dist/quill.js\");\n/* harmony import */ var quill__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./imports/defaults.js */ \"./src/adc-core/fields/collaborative-editor/imports/defaults.js\");\n/* harmony import */ var _imports_MediaBlot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./imports/MediaBlot */ \"./src/adc-core/fields/collaborative-editor/imports/MediaBlot.js\");\n/* harmony import */ var _imports_CardEditableModule__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./imports/CardEditableModule */ \"./src/adc-core/fields/collaborative-editor/imports/CardEditableModule.js\");\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\nsharedb_lib_client__WEBPACK_IMPORTED_MODULE_5__.types.register((__webpack_require__(/*! rich-text */ \"./node_modules/rich-text/index.js\").type));\n\nvar Parchment = quill__WEBPACK_IMPORTED_MODULE_6___default()[\"import\"](\"parchment\");\nvar lineHeightConfig = {\n  scope: Parchment.Scope.BLOCK,\n  whitelist: _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.lineHeightArr\n};\nvar lineHeightClass = new Parchment.Attributor.Class(\"lineheight\", \"ql-line-height\", lineHeightConfig);\nvar lineHeightStyle = new Parchment.Attributor.Style(\"lineheight\", \"line-height\", lineHeightConfig);\nParchment.register(lineHeightClass);\nParchment.register(lineHeightStyle);\nvar Size = quill__WEBPACK_IMPORTED_MODULE_6___default()[\"import\"](\"attributors/style/size\");\nSize.whitelist = _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.fontSizeArr;\nquill__WEBPACK_IMPORTED_MODULE_6___default().register(Size, true);\nconst FontAttributor = quill__WEBPACK_IMPORTED_MODULE_6___default()[\"import\"](\"attributors/style/font\");\nconst custom_fonts_titles = window.app_infos.custom_fonts.map(cf => cf.title);\nconst all_fonts = _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.fonts.concat(custom_fonts_titles);\nFontAttributor.whitelist = all_fonts;\nquill__WEBPACK_IMPORTED_MODULE_6___default().register(FontAttributor, true);\nvar BlockEmbed = quill__WEBPACK_IMPORTED_MODULE_6___default()[\"import\"](\"blots/block/embed\");\nclass DividerBlot extends BlockEmbed {}\nDividerBlot.blotName = \"divider\";\nDividerBlot.tagName = \"hr\";\nquill__WEBPACK_IMPORTED_MODULE_6___default().register(DividerBlot);\n\n\nquill__WEBPACK_IMPORTED_MODULE_6___default().register(\"formats/media\", _imports_MediaBlot__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\nquill__WEBPACK_IMPORTED_MODULE_6___default().register(\"modules/cardEditable\", _imports_CardEditableModule__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\n// how it works:\n// -> disabled by default\n// -> if is_collaborative is true, it uses sharedb on the server to handle conflict-free editing\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    path: String,\n    content: String,\n    scrollingContainer: HTMLElement,\n    custom_formats: Array,\n    line_selected: [Boolean, Number],\n    edit_on_mounted: Boolean,\n    can_edit: Boolean\n    // enabled for page_by_page, this means that the edit button is located in the top right corner in absolute,\n    // and that the toolbar moves to the closest parent dedicated container after creation\n  },\n\n  components: {\n    TextVersioning: _TextVersioning_vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n  },\n  data() {\n    return {\n      editor: null,\n      text_deltas: null,\n      toolbar_el: null,\n      rtc: {\n        socket: null,\n        connection_state: null\n      },\n      show_archives: false,\n      debounce_textUpdate: undefined,\n      is_collaborative: true,\n      collaborative_is_loaded: false,\n      autosave: true,\n      editor_is_enabled: false,\n      doc: undefined,\n      is_loading_or_saving: false,\n      is_disabling_editor: false,\n      show_saved_icon: false,\n      currently_selected_eles: false,\n      editor_id: (Math.random().toString(36) + \"00000000000000000\").slice(2, 5 + 5)\n    };\n  },\n  created() {},\n  async mounted() {\n    await this.initEditor();\n    this.toolbar_el = this.$el.querySelector(\".ql-toolbar\");\n    if (this.edit_on_mounted === true) this.enableEditor();\n  },\n  beforeDestroy() {\n    this.disableEditor();\n  },\n  watch: {\n    content() {\n      if (!this.is_collaborative || this.is_collaborative && !this.editor_is_enabled) {\n        this.$nextTick(() => {\n          debugger;\n          this.editor.root.innerHTML = this.content;\n        });\n      }\n    },\n    line_selected: {\n      handler() {\n        if (this.line_selected) {\n          // let [line, offset] = quill.getLine(this.line_selected);\n          this.$nextTick(() => {\n            const selected_line = this.editor.container.querySelector(`.ql-editor > *:nth-child(${this.line_selected})`);\n            this.currently_selected_eles = [selected_line];\n            this.$nextTick(() => {\n              selected_line.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n                inline: \"nearest\"\n              });\n            });\n          });\n        }\n        this.currently_selected_eles = false;\n      },\n      immediate: true\n    },\n    can_edit() {\n      if (!this.can_edit && this.editor_is_enabled) this.disableEditor();\n    },\n    currently_selected_eles(newEles) {\n      this.editor.container.querySelectorAll(\".is--selected\").forEach(el => el.classList && el.classList.remove(\"is--selected\"));\n      if (newEles) newEles.forEach(el => el.classList && el.classList.add(\"is--selected\"));\n    }\n  },\n  computed: {\n    quill_styles() {\n      let css = \"\";\n      for (const font of all_fonts) {\n        css += `\n.ql-picker.ql-font .ql-picker-label[data-value=\"${font}\"]::before,\n.ql-picker.ql-font .ql-picker-item[data-value=\"${font}\"]::before {\n  content: \"${font}\";\n  font-family: \"${font}\";\n}\n        `;\n      }\n      return css;\n    }\n  },\n  methods: {\n    async initEditor() {\n      const toolbar = this.makeToolbar();\n      this.editor = new (quill__WEBPACK_IMPORTED_MODULE_6___default())(this.$refs.editor, {\n        // debug: \"info\",\n        modules: {\n          cardEditable: true,\n          toolbar: toolbar\n        },\n        bounds: this.$refs.editor,\n        theme: \"snow\",\n        formats: this.custom_formats || _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.formats,\n        placeholder: \"\",\n        readOnly: !this.editor_is_enabled,\n        scrollingContainer: this.scrollingContainer\n      });\n      if (this.content) this.editor.root.innerHTML = this.content;\n      this.setStatusButton();\n      this.editor.on(\"selection-change\", () => {\n        console.log(`CollaborativeEditor / selection-change`);\n        this.updateSelectedLines();\n      });\n      this.editor.on(\"text-change\", (delta, oldDelta, source) => {\n        delta, oldDelta, source;\n        console.log(`CollaborativeEditor / text-change w source ${source}`);\n        this.$nextTick(() => {\n          // todo : only update if possibly changing line (backspace and enter)\n          this.updateSelectedLines();\n        });\n      });\n    },\n    makeToolbar() {\n      let container = [];\n      let reference_formats = this.custom_formats || _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.formats;\n      if (reference_formats.includes(\"font\")) container.push([{\n        font: all_fonts\n      }]);\n      if (reference_formats.includes(\"header\")) container.push([{\n        header: [false, 1, 2, 3]\n      }]);\n      if (reference_formats.includes(\"size\")) container.push([{\n        size: _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.fontSizeArr\n      }]);\n      if (reference_formats.includes(\"lineheight\")) container.push([{\n        lineheight: _imports_defaults_js__WEBPACK_IMPORTED_MODULE_7__.lineHeightArr\n      }]);\n      let formatting_opt = [];\n      const basic_formatting = [\"bold\", \"italic\", \"underline\", \"strike\", \"link\", \"blockquote\"];\n      basic_formatting.map(bf => {\n        if (reference_formats.includes(bf)) formatting_opt.push(bf);\n      });\n      container.push(formatting_opt);\n      if (reference_formats.includes(\"color\")) container.push([{\n        color: [\"#000000\", \"#353535\", \"#b9b9b9\", \"#fff\", \"#1d327f\", \"#52c5b9\", \"#ffbe32\", \"#fc4b60\", \"#ff3333\", \"#08cc11\", \"#1c52ee\", \"#ff9c33\", \"#000000\", \"#bdb3b3\", \"#ae1cee\", \"#fff933\", \"#a54a0f\"]\n      }]);\n      if (reference_formats.includes(\"background\")) container.push([{\n        background: [\"transparent\", \"#f1f1f1\", \"#b9b9b9\", \"#bec6e5\", \"#a5e5da\", \"#ffd892\", \"#ff808c\", \"#ff3333\", \"#08cc11\", \"#1c52ee\", \"#ff9c33\", \"#000000\", \"#bdb3b3\", \"#ae1cee\", \"#fff933\", \"#a54a0f\"]\n      }]);\n      if (reference_formats.includes(\"list\")) container.push([{\n        list: \"ordered\"\n      }, {\n        list: \"bullet\"\n      }]);\n      if (reference_formats.includes(\"align\")) container.push([{\n        align: \"\"\n      }, {\n        align: \"center\"\n      }, {\n        align: \"right\"\n      }, {\n        align: \"justify\"\n      }]);\n      if (reference_formats.includes(\"code-block\")) container.push([\"code-block\"]);\n\n      // todo divider\n      container.push([\"clean\"]);\n      let handlers = {\n        divider: function () {\n          var range = this.quill.getSelection();\n          if (range) {\n            this.quill.insertEmbed(range.index, \"divider\", \"null\", (quill__WEBPACK_IMPORTED_MODULE_6___default().sources.USER));\n          }\n        },\n        line_height_select: function (new_line_height) {\n          new_line_height;\n          // var range = this.quill.getSelection();\n          // if (range) {\n          //   debugger;\n          //   this.quill.format(\n          //     range.index,\n          //     range.length,\n          //     \"line-height\",\n          //     +new_line_height,\n          //     \"user\"\n          //   );\n          // }\n        }\n      };\n\n      return {\n        container,\n        handlers\n      };\n    },\n    getEditorContent() {\n      console.log(`CollaborativeEditor • getEditorContent`);\n      if (!this.editor.getText() || this.editor.getText() === \"\\n\") return \"\";\n      let html = this.editor.root.innerHTML;\n      html = this.cleanEditorContent(html);\n      return html;\n    },\n    cleanEditorContent(html) {\n      console.log(`CollaborativeEditor • cleanEditorContent`);\n      var t = document.createElement(\"template\");\n      t.innerHTML = html;\n\n      // used to make sure we don’t get weird stuff such as <p style=\"font-family: \"Avada\";\">plop</p>\n      // content = content.replace(/&quot;/g, \"'\");\n      // todo : remove status class like is--selected or is--dragover\n      t.content.querySelectorAll(\".is--selected\").forEach(el => el.classList && el.classList.remove(\"is--selected\"));\n      return t.innerHTML;\n    },\n    setStatusButton() {\n      if (this.$refs.editBtn) this.$el.querySelector(\".ql-toolbar\").appendChild(this.$refs.editBtn);\n    },\n    toggleEdit() {\n      if (!this.editor_is_enabled) this.enableEditor();else this.disableEditor();\n    },\n    async enableEditor() {\n      if (this.editor_is_enabled || !this.can_edit) return false;\n      console.log(`CollaborativeEditor2 • enableEditor`);\n      if (this.is_collaborative) await this.startCollaborative();\n      this.editor.enable();\n      this.editor.focus();\n\n      // todo select latest used font as selected font\n      if (this.editor.getLength() <= 1) {\n        const fontLastUsed = localStorage.getItem(\"fontLastUsed\");\n        this.editor.format(\"font\", fontLastUsed);\n      }\n      this.editor.setSelection(this.editor.getLength(), (quill__WEBPACK_IMPORTED_MODULE_6___default().sources.SILENT));\n      this.$emit(`contentIsEdited`, this.toolbar_el);\n      this.editor_is_enabled = true;\n    },\n    async disableEditor() {\n      if (!this.editor_is_enabled) return false;\n      console.log(`CollaborativeEditor2 • disableEditor`);\n      this.is_disabling_editor = true;\n      this.editor.setSelection(null);\n      this.editor.blur();\n      this.updateSelectedLines();\n      if (this.is_collaborative) this.endCollaborative();\n      await this.saveText();\n\n      // check if toolbar is away, get it back if it is\n      this.getToolbarBack();\n      this.$emit(`contentIsNotEdited`);\n      this.$nextTick(() => {\n        this.editor.disable();\n        this.editor_is_enabled = false;\n        this.is_disabling_editor = false;\n      });\n    },\n    getToolbarBack() {\n      if (!this.toolbar_el.parentElement.classList.contains(\"_toolbarAndEditorContainer\")) this.$el.querySelector(\"._toolbarAndEditorContainer\").prepend(this.toolbar_el);\n    },\n    restoreVersion(content) {\n      // TODO : with delta to allow for undo\n      // this.editor.root.innerHTML = content;\n      const value = content;\n      const delta = this.editor.clipboard.convert(value);\n      this.editor.setContents(delta, \"user\");\n      this.show_archives = false;\n    },\n    editorClick($event) {\n      // $event.preventDefault();\n      if ($event.target.parentElement && $event.target.parentElement.classList && $event.target.parentElement.classList.contains(\"ql-editor\")) {\n        // click on the left of the element\n        if ($event.offsetX < 0) {\n          const line_number = Array.from($event.target.parentElement.children).findIndex(c => c === $event.target);\n          this.$emit(\"lineClicked\", line_number + 1);\n        }\n      }\n    },\n    updateSelectedLines() {\n      // console.log(`CollaborativeEditor • updateSelectedLines`);\n      if (!this.editor_is_enabled) return;\n      const range = this.editor.getSelection();\n      if (range && range.index) {\n        // console.log(\n        //   `CollaborativeEditor • updateSelectedLines / range.index = ${range.index} et range.length = ${range.length} `\n        // );\n\n        let blots = [];\n        if (range.length === 0) blots = [this.editor.getLine(range.index)[0]];else blots = this.editor.getLines(range.index, range.length);\n        if (blots) {\n          this.currently_selected_eles = blots.map(b => b.domNode);\n          return;\n        }\n      }\n      this.currently_selected_eles = false;\n    },\n    async saveText() {\n      const new_meta = {\n        $content: this.getEditorContent()\n      };\n      try {\n        this.is_loading_or_saving = true;\n        await this.$api.updateMeta({\n          path: this.path,\n          new_meta\n        });\n        this.is_loading_or_saving = false;\n        this.show_saved_icon = true;\n        await new Promise(r => setTimeout(r, 1500));\n        this.show_saved_icon = false;\n      } catch (err) {\n        if (err.message === \"content not changed\") err;\n        this.is_loading_or_saving = false;\n      }\n    },\n    async startCollaborative() {\n      return new Promise((resolve, reject) => {\n        // const params = new URLSearchParams({\n        //   folder_type: this.folder_type,\n        //   folder_slug: this.folder_slug,\n        //   meta_slug: this.meta_slug,\n        // });\n\n        // const requested_querystring = \"?\" + params.toString();\n        const path_to_meta = this.path.replaceAll(\"/\", \"*\");\n        const requested_resource_url = (location.protocol === \"https:\" ? \"wss\" : \"ws\") + \"://\" + window.location.host + \"/isSharedb\" + `?path_to_meta=${path_to_meta}`;\n        console.log(`CollaborativeEditor / startCollaborative : will connect to ws server with ${requested_resource_url}`);\n        this.rtc.socket = new (reconnectingwebsocket__WEBPACK_IMPORTED_MODULE_4___default())(requested_resource_url);\n        const connection = new sharedb_lib_client__WEBPACK_IMPORTED_MODULE_5__.Connection(this.rtc.socket);\n        connection.on(\"state\", state => {\n          this.rtc.connection_state = state.toString();\n        });\n        console.log(`CollaborativeEditor / connecting to doc ${path_to_meta}`);\n        this.doc = connection.get(\"collaborative_texts\", path_to_meta);\n        this.doc.subscribe(err => {\n          if (err) console.error(`CollaborativeEditor / err ${err}`);\n          console.log(`CollaborativeEditor / doc subscribe`);\n          if (this.doc.type) {\n            console.log(`CollaborativeEditor / doc already exists and doc.data = ${JSON.stringify(this.doc.data)}`);\n            this.editor.setContents(this.doc.data, \"init\");\n          } else {\n            this.doc.create(this.editor.getContents(), \"rich-text\");\n          }\n          this.editor.history.clear();\n          this.editor.on(\"text-change\", this.submitOPAndSave);\n          this.doc.on(\"op\", (op, source) => {\n            console.log(`CollaborativeEditor / op applied`);\n            this.text_deltas = this.doc.data;\n            if (source === this.editor_id) return;\n            console.log(`CollaborativeEditor / outside op applied`);\n            this.editor.updateContents(op);\n          });\n          this.collaborative_is_loaded = true;\n          return resolve();\n        });\n        this.doc.on(\"error\", err => {\n          // err;\n          // soucis : les situations ou le serveur a été fermé et en le rouvrant il ne possède plus d’instance du doc dans sharedb…\n          console.error(`CollaborativeEditor / doc err ${err}`);\n          this.$alertify.delay(4000).error(err);\n          this.collaborative_is_loaded = true;\n          return reject(err);\n        });\n      });\n    },\n    endCollaborative() {\n      if (this.rtc.socket) this.rtc.socket.close();\n      if (this.doc) {\n        this.doc.unsubscribe();\n        this.doc = null;\n      }\n      this.editor.off(\"text-change\", this.submitOPAndSave);\n      this.collaborative_is_loaded = false;\n    },\n    submitOPAndSave(delta, oldDelta, source) {\n      console.log(`CollaborativeEditor / submitOPAndSave w source ${source}`);\n      if (source === \"user\") {\n        this.doc.submitOp(delta, {\n          source: this.editor_id\n        });\n        console.log(`CollaborativeEditor / submitted op to server ${JSON.stringify(delta)}`);\n        this.updateTextMedia();\n      }\n    },\n    updateTextMedia() {\n      if (this.debounce_textUpdate) clearTimeout(this.debounce_textUpdate);\n      this.is_loading_or_saving = true;\n      this.debounce_textUpdate = setTimeout(async () => {\n        console.log(`CollaborativeEditor • updateTextMedia: saving new snapshot`);\n        await this.saveText();\n        const {\n          font\n        } = this.editor.getFormat();\n        localStorage.setItem(\"fontLastUsed\", font);\n      }, 1000);\n    },\n    addMediaAtTheEnd(media) {\n      this.addMediaAtIndex(this.editor.getLength() - 1, media);\n    },\n    addMediaAtCaretPosition(media) {\n      const selection = this.editor.getSelection(true);\n      if (selection && selection.index) {\n        this.addMediaAtIndex(selection.index, media);\n        return;\n      }\n      this.addMediaAtTheEnd(media);\n    },\n    addMediaAtIndex(index, media) {\n      console.log(`CollaborativeEditor • addMediaAtIndex ${index}`);\n      // TODO fix\n      const mediaURL = `./${this.folder_slug}/${media.media_filename}`;\n      // const mediaURL =\n      //   this.$root.state.mode === \"export_publication\"\n      //     ? `./${this.folder_slug}/${media.media_filename}`\n      //     : `/${this.folder_slug}/${media.media_filename}`;\n\n      // setting editor focus and selection can cause the scroll to \"jump\"\n      // not exactly a good idea…\n      // this.editor.setSelection(index, Quill.sources.SILENT);\n      // this.editor.focus();\n\n      this.editor.blur();\n      const {\n        $type,\n        caption,\n        $path\n      } = media;\n      $path;\n      if ($type === \"image\") {\n        const thumb_path = media.$thumbs[1600];\n        if (thumb_path) {\n          // this.editor.insertText(index, \"\\n\", Quill.sources.USER);\n          this.editor.insertEmbed(index, \"media\", {\n            type: $type,\n            caption\n            // TODO update with $path\n            // meta_filename: $slug,\n            // src: `/thumbs/${this.folder_type}/${this.folder_slug}/${thumb_path}`,\n          }, (quill__WEBPACK_IMPORTED_MODULE_6___default().sources.USER));\n          // this.editor.setSelection(index + 1, Quill.sources.SILENT);\n        }\n      } else if ($type === \"video\") {\n        // this.editor.insertText(index, \"\\n\", Quill.sources.USER);\n        this.editor.insertEmbed(index, \"media\", {\n          type: $type,\n          caption,\n          // TODO update with $path\n          meta_filename: $path,\n          src: mediaURL\n        }, (quill__WEBPACK_IMPORTED_MODULE_6___default().sources.USER));\n        // this.editor.setSelection(index + 1, Quill.sources.SILENT);\n      } else if ($type === \"audio\") {\n        this.editor.insertEmbed(index, \"media\", {\n          type: $type,\n          caption,\n          // TODO update with $path\n          meta_filename: $path,\n          src: mediaURL\n        }, (quill__WEBPACK_IMPORTED_MODULE_6___default().sources.USER));\n      } else {\n        this.$alertify.closeLogOnClick(true).delay(4000).error(this.$t(\"notifications.media_type_not_handled\"));\n      }\n    },\n    onDragover($event) {\n      if (!this.editor_is_enabled) return;\n      console.log(`CollaborativeEditor2 / onDragover`);\n      $event.preventDefault();\n      // todo debounce dragover to trigger only a handful of times per seconds\n      // const el = $event.target;\n      let _blot = this.getBlockFromElement($event.target);\n      if (!_blot) return false;\n\n      // do nothing if dragover on\n      // if (el.classList.contains(\"ql-editor\")) return;\n\n      // if (el.parentElement.classList.contains(\"ql-editor\")) {\n      if (!_blot.domNode.classList.contains(\"is--dragover\")) {\n        _blot.domNode.classList.add(\"is--dragover\");\n        _blot.domNode.addEventListener(\"dragleave\", () => {\n          console.log(`CollaborativeEditor2 / dragleave`);\n          _blot.domNode.classList.remove(\"is--dragover\");\n        });\n      }\n    },\n    // onDragLeave($event) {},\n    onDrop($event) {\n      if (!this.editor_is_enabled) return;\n      console.log(`CollaborativeEditor2 / onDrop`);\n\n      // Prevent default behavior (Prevent file from being opened)\n      $event.preventDefault();\n      $event.dataTransfer.dropEffect = \"move\";\n      this.removeDragoverFromBlots();\n      if ($event.dataTransfer.getData(\"text/plain\") === \"media_in_quill\") {\n        console.log(`CollaborativeEditor2 / onDrop : : drag and dropped a media from quill`);\n        let _blot = this.getBlockFromElement($event.target);\n        const index = this.editor.getIndex(_blot);\n\n        // find which blot was dragged (A)\n        // find where it was dropped (B)\n        // move delta from A to B\n\n        console.log(`_blot is currently at index ${index}`);\n      } else if ($event.dataTransfer.getData(\"text/plain\")) {\n        console.log(`CollaborativeEditor2 / onDrop : : dropped a media from the library`);\n        const media = JSON.parse($event.dataTransfer.getData(\"text/plain\"));\n        console.log(media);\n        if (media.media_filename) {\n          // drop sur l’éditor et pas sur une ligne\n          if ($event.target.classList.contains(\"ql-editor\")) {\n            console.log(\"dropped on editor and not on line, will insert at the end of doc\");\n            this.addMediaAtIndex(this.editor.getLength() - 1, media);\n            return;\n          }\n          let _blot = this.getBlockFromElement($event.target);\n          if (!_blot) {\n            this.$alertify.closeLogOnClick(true).delay(4000).error(this.$t(\"notifications.failed_to_find_block_line\"));\n            return;\n          }\n          _blot = _blot.next !== null && _blot.next.domNode ? _blot.next : _blot;\n          const index = this.editor.getIndex(_blot);\n          this.addMediaAtIndex(index - 1, media);\n        }\n      } else {\n        console.log(`CollaborativeEditor2 / onDrop : missing meta for drop to occur`);\n      }\n    },\n    removeDragoverFromBlots() {\n      this.editor.getLines().map(b => {\n        while (b.parent !== b.scroll) {\n          b = b.parent;\n          if (b === b.scroll) {\n            break;\n          }\n        }\n        if (b !== b.scroll && b.domNode) {\n          b.domNode.classList.remove(\"is--dragover\");\n        }\n      });\n    },\n    getBlockFromElement(_target) {\n      while (!_target.parentElement.classList.contains(\"ql-editor\")) {\n        _target = _target.parentElement;\n        if (_target === null || !_target.parentElement) break;\n      }\n      let _blot = quill__WEBPACK_IMPORTED_MODULE_6___default().find(_target);\n      if (_blot) return _blot;\n      return false;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/fields/collaborative-editor/CollaborativeEditor2.vue?vue&type=script&lang=js&\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "3eadefbbffe5feb4"; }
/******/ }();
/******/ 
/******/ }
);