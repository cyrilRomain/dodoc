"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateapp"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _adc_core_modals_GeneralPasswordModal_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/adc-core/modals/GeneralPasswordModal.vue */ \"./src/adc-core/modals/GeneralPasswordModal.vue\");\n/* harmony import */ var _adc_core_tasks_TaskTracker_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/adc-core/tasks/TaskTracker.vue */ \"./src/adc-core/tasks/TaskTracker.vue\");\n/* harmony import */ var _adc_core_modals_DisconnectModal_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/adc-core/modals/DisconnectModal.vue */ \"./src/adc-core/modals/DisconnectModal.vue\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {},\n  components: {\n    GeneralPasswordModal: _adc_core_modals_GeneralPasswordModal_vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    TaskTracker: _adc_core_tasks_TaskTracker_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    DisconnectModal: _adc_core_modals_DisconnectModal_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n  },\n  data() {\n    return {\n      show_general_password_modal: false,\n      show_disconnect_modal: false\n    };\n  },\n  created() {\n    this.$eventHub.$on(`app.prompt_general_password`, this.promptGeneralPassword);\n    this.$eventHub.$on(\"socketio.disconnect\", this.showDisconnectModal);\n  },\n  mounted() {},\n  beforeDestroy() {\n    this.$eventHub.$off(`app.prompt_general_password`, this.promptGeneralPassword);\n  },\n  watch: {},\n  computed: {},\n  methods: {\n    showDisconnectModal() {\n      this.show_disconnect_modal = true;\n    },\n    promptGeneralPassword() {\n      this.show_general_password_modal = true;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "5364a563a9a39330"; }
/******/ }();
/******/ 
/******/ }
);