"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateapp"]("LumaView",{

/***/ "./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=template&id=0881f348&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=template&id=0881f348&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": function() { return /* binding */ render; },\n/* harmony export */   \"staticRenderFns\": function() { return /* binding */ staticRenderFns; }\n/* harmony export */ });\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      !_vm.first_folder\n        ? _c(\"LoaderSpinner\")\n        : _c(\"div\", { staticClass: \"_multiPanes\" }, [\n            _c(\n              \"section\",\n              { staticClass: \"_myContent\" },\n              [\n                _vm.show_authors_modal\n                  ? _c(\"AuthorList\", {\n                      on: {\n                        close: function ($event) {\n                          _vm.show_authors_modal = false\n                        },\n                      },\n                    })\n                  : _vm._e(),\n                _c(\"div\", { staticClass: \"_subscribeBtn\" }, [\n                  _c(\n                    \"button\",\n                    {\n                      staticClass: \"_authorBtn\",\n                      attrs: { type: \"button\" },\n                      on: { click: _vm.showAuthorModal },\n                    },\n                    [\n                      _vm.connected_as\n                        ? [_vm._v(\" \" + _vm._s(_vm.connected_as.name) + \" \")]\n                        : [_vm._v(_vm._s(_vm.$t(\"login\")))],\n                    ],\n                    2\n                  ),\n                ]),\n                _vm.connected_as\n                  ? _c(\"div\", {}, [_c(\"MyChutier\")], 1)\n                  : _vm._e(),\n              ],\n              1\n            ),\n            _c(\n              \"section\",\n              { staticClass: \"_sharedContent\" },\n              [_c(\"EspaceCommun\")],\n              1\n            ),\n          ]),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zcmMvdmlld3MvTHVtYVZpZXcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA4ODFmMzQ4JnNjb3BlZD10cnVlJi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9zcmMvdmlld3MvTHVtYVZpZXcudnVlP2U1NjMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICBbXG4gICAgICAhX3ZtLmZpcnN0X2ZvbGRlclxuICAgICAgICA/IF9jKFwiTG9hZGVyU3Bpbm5lclwiKVxuICAgICAgICA6IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiX211bHRpUGFuZXNcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJzZWN0aW9uXCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiX215Q29udGVudFwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfdm0uc2hvd19hdXRob3JzX21vZGFsXG4gICAgICAgICAgICAgICAgICA/IF9jKFwiQXV0aG9yTGlzdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93X2F1dGhvcnNfbW9kYWwgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIl9zdWJzY3JpYmVCdG5cIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIl9hdXRob3JCdG5cIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaG93QXV0aG9yTW9kYWwgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5jb25uZWN0ZWRfYXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW192bS5fdihcIiBcIiArIF92bS5fcyhfdm0uY29ubmVjdGVkX2FzLm5hbWUpICsgXCIgXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJsb2dpblwiKSkpXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uY29ubmVjdGVkX2FzXG4gICAgICAgICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHt9LCBbX2MoXCJNeUNodXRpZXJcIildLCAxKVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcInNlY3Rpb25cIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJfc2hhcmVkQ29udGVudFwiIH0sXG4gICAgICAgICAgICAgIFtfYyhcIkVzcGFjZUNvbW11blwiKV0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=template&id=0881f348&scoped=true&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var splitpanes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! splitpanes */ \"./node_modules/splitpanes/dist/splitpanes.es.js\");\n/* harmony import */ var _adc_core_author_AuthorList_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/adc-core/author/AuthorList.vue */ \"./src/adc-core/author/AuthorList.vue\");\n/* harmony import */ var _components_MyChutier_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/MyChutier.vue */ \"./src/components/MyChutier.vue\");\n/* harmony import */ var _components_EspaceCommun_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/EspaceCommun.vue */ \"./src/components/EspaceCommun.vue\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {},\n  components: {\n    AuthorList: _adc_core_author_AuthorList_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    MyChutier: _components_MyChutier_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    EspaceCommun: _components_EspaceCommun_vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    Splitpanes: splitpanes__WEBPACK_IMPORTED_MODULE_0__.Splitpanes,\n    Pane: splitpanes__WEBPACK_IMPORTED_MODULE_0__.Pane\n  },\n  data() {\n    return {\n      path: \"folders\",\n      folders: undefined,\n      show_authors_modal: false\n    };\n  },\n  created() {},\n  async mounted() {\n    await this.loadFolder();\n    // check if necerray to login or create account :\n    if (!this.connected_as) this.showAuthorModal();\n  },\n  beforeDestroy() {},\n  watch: {\n    connected_as() {\n      // if (this.connected_as) {\n      // this.show_authors_modal = false;\n      // }\n    }\n  },\n  computed: {\n    first_folder() {\n      if (this.folders && this.folders.length > 0) return this.folders[0];\n      return false;\n    }\n  },\n  methods: {\n    async loadFolder() {\n      this.folders = await this.$api.getFolders({\n        path: this.path\n      }).catch(err => {\n        this.fetch_spaces_error = err.response;\n        // this.is_loading = false;\n        return;\n      });\n      if (this.folders.length === 0) {\n        await this.createFolder();\n        window.location.reload();\n      }\n      this.$api.join({\n        room: this.path\n      });\n    },\n    async createFolder() {\n      try {\n        const new_space_slug = await this.$api.createFolder({\n          path: this.path\n        });\n        return new_space_slug;\n      } catch (err) {\n        // this.error_msg = \"Error: \" + err.message;\n        // setTimeout(() => {\n        //   this.error_msg = \"\";\n        // }, 5000);\n        // this.is_creating_project = false;\n      }\n    },\n    showAuthorModal() {\n      this.show_authors_modal = true;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0zN1swXS5ydWxlc1swXS51c2VbMF0hLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NyYy92aWV3cy9MdW1hVmlldy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwL3NyYy92aWV3cy9MdW1hVmlldy52dWU/NzA3NSJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPCEtLSAvLyBpZGVudGlmaWV6LXZvdXMgIC0tPlxuICAgIDwhLS0gLy8gdW5lIGZvaXMgaWRlbnRpZmnDqSwgYWNjw6hzIMOgIHNvbiBjaHV0aWVyIC0tPlxuICAgIDwhLS0gLy8gKyBhY2PDqHMgYXUgbG90IGNvbW11biAtLT5cbiAgICA8TG9hZGVyU3Bpbm5lciB2LWlmPVwiIWZpcnN0X2ZvbGRlclwiIC8+XG4gICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJfbXVsdGlQYW5lc1wiPlxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJfbXlDb250ZW50XCI+XG4gICAgICAgIDxBdXRob3JMaXN0XG4gICAgICAgICAgdi1pZj1cInNob3dfYXV0aG9yc19tb2RhbFwiXG4gICAgICAgICAgQGNsb3NlPVwic2hvd19hdXRob3JzX21vZGFsID0gZmFsc2VcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJfc3Vic2NyaWJlQnRuXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJfYXV0aG9yQnRuXCIgQGNsaWNrPVwic2hvd0F1dGhvck1vZGFsXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImNvbm5lY3RlZF9hc1wiPlxuICAgICAgICAgICAgICB7eyBjb25uZWN0ZWRfYXMubmFtZSB9fVxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgJHQoXCJsb2dpblwiKSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cImNvbm5lY3RlZF9hc1wiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgPE15Q2h1dGllciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwiX3NoYXJlZENvbnRlbnRcIj5cbiAgICAgICAgPEVzcGFjZUNvbW11biAvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IHsgU3BsaXRwYW5lcywgUGFuZSB9IGZyb20gXCJzcGxpdHBhbmVzXCI7XG5cbmltcG9ydCBBdXRob3JMaXN0IGZyb20gXCJAL2FkYy1jb3JlL2F1dGhvci9BdXRob3JMaXN0LnZ1ZVwiO1xuaW1wb3J0IE15Q2h1dGllciBmcm9tIFwiQC9jb21wb25lbnRzL015Q2h1dGllci52dWVcIjtcbmltcG9ydCBFc3BhY2VDb21tdW4gZnJvbSBcIkAvY29tcG9uZW50cy9Fc3BhY2VDb21tdW4udnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHt9LFxuICBjb21wb25lbnRzOiB7XG4gICAgQXV0aG9yTGlzdCxcbiAgICBNeUNodXRpZXIsXG4gICAgRXNwYWNlQ29tbXVuLFxuICAgIFNwbGl0cGFuZXMsXG4gICAgUGFuZSxcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCJmb2xkZXJzXCIsXG4gICAgICBmb2xkZXJzOiB1bmRlZmluZWQsXG4gICAgICBzaG93X2F1dGhvcnNfbW9kYWw6IGZhbHNlLFxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZWQoKSB7fSxcbiAgYXN5bmMgbW91bnRlZCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRGb2xkZXIoKTtcbiAgICAvLyBjaGVjayBpZiBuZWNlcnJheSB0byBsb2dpbiBvciBjcmVhdGUgYWNjb3VudCA6XG4gICAgaWYgKCF0aGlzLmNvbm5lY3RlZF9hcykgdGhpcy5zaG93QXV0aG9yTW9kYWwoKTtcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSgpIHt9LFxuICB3YXRjaDoge1xuICAgIGNvbm5lY3RlZF9hcygpIHtcbiAgICAgIC8vIGlmICh0aGlzLmNvbm5lY3RlZF9hcykge1xuICAgICAgLy8gdGhpcy5zaG93X2F1dGhvcnNfbW9kYWwgPSBmYWxzZTtcbiAgICAgIC8vIH1cbiAgICB9LFxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGZpcnN0X2ZvbGRlcigpIHtcbiAgICAgIGlmICh0aGlzLmZvbGRlcnMgJiYgdGhpcy5mb2xkZXJzLmxlbmd0aCA+IDApIHJldHVybiB0aGlzLmZvbGRlcnNbMF07XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFzeW5jIGxvYWRGb2xkZXIoKSB7XG4gICAgICB0aGlzLmZvbGRlcnMgPSBhd2FpdCB0aGlzLiRhcGlcbiAgICAgICAgLmdldEZvbGRlcnMoe1xuICAgICAgICAgIHBhdGg6IHRoaXMucGF0aCxcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICB0aGlzLmZldGNoX3NwYWNlc19lcnJvciA9IGVyci5yZXNwb25zZTtcbiAgICAgICAgICAvLyB0aGlzLmlzX2xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuZm9sZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVGb2xkZXIoKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRhcGkuam9pbih7IHJvb206IHRoaXMucGF0aCB9KTtcbiAgICB9LFxuICAgIGFzeW5jIGNyZWF0ZUZvbGRlcigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5ld19zcGFjZV9zbHVnID0gYXdhaXQgdGhpcy4kYXBpLmNyZWF0ZUZvbGRlcih7XG4gICAgICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld19zcGFjZV9zbHVnO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHRoaXMuZXJyb3JfbXNnID0gXCJFcnJvcjogXCIgKyBlcnIubWVzc2FnZTtcbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vICAgdGhpcy5lcnJvcl9tc2cgPSBcIlwiO1xuICAgICAgICAvLyB9LCA1MDAwKTtcbiAgICAgICAgLy8gdGhpcy5pc19jcmVhdGluZ19wcm9qZWN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93QXV0aG9yTW9kYWwoKSB7XG4gICAgICB0aGlzLnNob3dfYXV0aG9yc19tb2RhbCA9IHRydWU7XG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5fbXlDb250ZW50IHtcbiAgd2lkdGg6IDU1MHB4O1xuICBtaW4taGVpZ2h0OiA1NTBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm94LXNoYWRvdzogMCAwcHggNXB4IHJnYigwIDAgMCAvIDEyJSk7XG59XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/LumaView.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/splitpanes/dist/splitpanes.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/splitpanes/dist/splitpanes.es.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Pane\": function() { return /* binding */ pane; },\n/* harmony export */   \"Splitpanes\": function() { return /* binding */ splitpanes; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.reduce.js */ \"./node_modules/core-js/modules/es.array.reduce.js\");\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nvar splitpanes_vue_vue_type_style_index_0_lang = \"\";\nfunction normalizeComponent(scriptExports, render2, staticRenderFns2, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {\n  var options = typeof scriptExports === \"function\" ? scriptExports.options : scriptExports;\n  if (render2) {\n    options.render = render2;\n    options.staticRenderFns = staticRenderFns2;\n    options._compiled = true;\n  }\n  if (functionalTemplate) {\n    options.functional = true;\n  }\n  if (scopeId) {\n    options._scopeId = \"data-v-\" + scopeId;\n  }\n  var hook;\n  if (moduleIdentifier) {\n    hook = function (context) {\n      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== \"undefined\") {\n        context = __VUE_SSR_CONTEXT__;\n      }\n      if (injectStyles) {\n        injectStyles.call(this, context);\n      }\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    };\n    options._ssrRegister = hook;\n  } else if (injectStyles) {\n    hook = shadowMode ? function () {\n      injectStyles.call(this, (options.functional ? this.parent : this).$root.$options.shadowRoot);\n    } : injectStyles;\n  }\n  if (hook) {\n    if (options.functional) {\n      options._injectStyles = hook;\n      var originalRender = options.render;\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n  return {\n    exports: scriptExports,\n    options\n  };\n}\nconst __vue2_script$1 = {\n  name: \"splitpanes\",\n  props: {\n    horizontal: {\n      type: Boolean\n    },\n    pushOtherPanes: {\n      type: Boolean,\n      default: true\n    },\n    dblClickSplitter: {\n      type: Boolean,\n      default: true\n    },\n    rtl: {\n      type: Boolean,\n      default: false\n    },\n    firstSplitter: {\n      type: Boolean\n    }\n  },\n  provide() {\n    return {\n      requestUpdate: this.requestUpdate,\n      onPaneAdd: this.onPaneAdd,\n      onPaneRemove: this.onPaneRemove,\n      onPaneClick: this.onPaneClick\n    };\n  },\n  data: () => ({\n    container: null,\n    ready: false,\n    panes: [],\n    touch: {\n      mouseDown: false,\n      dragging: false,\n      activeSplitter: null\n    },\n    splitterTaps: {\n      splitter: null,\n      timeoutId: null\n    }\n  }),\n  computed: {\n    panesCount() {\n      return this.panes.length;\n    },\n    indexedPanes() {\n      return this.panes.reduce((obj, pane2) => (obj[pane2.id] = pane2) && obj, {});\n    }\n  },\n  methods: {\n    updatePaneComponents() {\n      this.panes.forEach(pane2 => {\n        pane2.update && pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n    },\n    bindEvents() {\n      document.addEventListener(\"mousemove\", this.onMouseMove, {\n        passive: false\n      });\n      document.addEventListener(\"mouseup\", this.onMouseUp);\n      if (\"ontouchstart\" in window) {\n        document.addEventListener(\"touchmove\", this.onMouseMove, {\n          passive: false\n        });\n        document.addEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n    unbindEvents() {\n      document.removeEventListener(\"mousemove\", this.onMouseMove, {\n        passive: false\n      });\n      document.removeEventListener(\"mouseup\", this.onMouseUp);\n      if (\"ontouchstart\" in window) {\n        document.removeEventListener(\"touchmove\", this.onMouseMove, {\n          passive: false\n        });\n        document.removeEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n    onMouseDown(event, splitterIndex) {\n      this.bindEvents();\n      this.touch.mouseDown = true;\n      this.touch.activeSplitter = splitterIndex;\n    },\n    onMouseMove(event) {\n      if (this.touch.mouseDown) {\n        event.preventDefault();\n        this.touch.dragging = true;\n        this.calculatePanesSize(this.getCurrentMouseDrag(event));\n        this.$emit(\"resize\", this.panes.map(pane2 => ({\n          min: pane2.min,\n          max: pane2.max,\n          size: pane2.size\n        })));\n      }\n    },\n    onMouseUp() {\n      if (this.touch.dragging) {\n        this.$emit(\"resized\", this.panes.map(pane2 => ({\n          min: pane2.min,\n          max: pane2.max,\n          size: pane2.size\n        })));\n      }\n      this.touch.mouseDown = false;\n      setTimeout(() => {\n        this.touch.dragging = false;\n        this.unbindEvents();\n      }, 100);\n    },\n    onSplitterClick(event, splitterIndex) {\n      if (\"ontouchstart\" in window) {\n        event.preventDefault();\n        if (this.dblClickSplitter) {\n          if (this.splitterTaps.splitter === splitterIndex) {\n            clearTimeout(this.splitterTaps.timeoutId);\n            this.splitterTaps.timeoutId = null;\n            this.onSplitterDblClick(event, splitterIndex);\n            this.splitterTaps.splitter = null;\n          } else {\n            this.splitterTaps.splitter = splitterIndex;\n            this.splitterTaps.timeoutId = setTimeout(() => {\n              this.splitterTaps.splitter = null;\n            }, 500);\n          }\n        }\n      }\n      if (!this.touch.dragging) this.$emit(\"splitter-click\", this.panes[splitterIndex]);\n    },\n    onSplitterDblClick(event, splitterIndex) {\n      let totalMinSizes = 0;\n      this.panes = this.panes.map((pane2, i) => {\n        pane2.size = i === splitterIndex ? pane2.max : pane2.min;\n        if (i !== splitterIndex) totalMinSizes += pane2.min;\n        return pane2;\n      });\n      this.panes[splitterIndex].size -= totalMinSizes;\n      this.$emit(\"pane-maximize\", this.panes[splitterIndex]);\n    },\n    onPaneClick(event, paneId) {\n      this.$emit(\"pane-click\", this.indexedPanes[paneId]);\n    },\n    getCurrentMouseDrag(event) {\n      const rect = this.container.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = \"ontouchstart\" in window && event.touches ? event.touches[0] : event;\n      return {\n        x: clientX - rect.left,\n        y: clientY - rect.top\n      };\n    },\n    getCurrentDragPercentage(drag) {\n      drag = drag[this.horizontal ? \"y\" : \"x\"];\n      const containerSize = this.container[this.horizontal ? \"clientHeight\" : \"clientWidth\"];\n      if (this.rtl && !this.horizontal) drag = containerSize - drag;\n      return drag * 100 / containerSize;\n    },\n    calculatePanesSize(drag) {\n      const splitterIndex = this.touch.activeSplitter;\n      let sums = {\n        prevPanesSize: this.sumPrevPanesSize(splitterIndex),\n        nextPanesSize: this.sumNextPanesSize(splitterIndex),\n        prevReachedMinPanes: 0,\n        nextReachedMinPanes: 0\n      };\n      const minDrag = 0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize);\n      const maxDrag = 100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize);\n      const dragPercentage = Math.max(Math.min(this.getCurrentDragPercentage(drag), maxDrag), minDrag);\n      let panesToResize = [splitterIndex, splitterIndex + 1];\n      let paneBefore = this.panes[panesToResize[0]] || null;\n      let paneAfter = this.panes[panesToResize[1]] || null;\n      const paneBeforeMaxReached = paneBefore.max < 100 && dragPercentage >= paneBefore.max + sums.prevPanesSize;\n      const paneAfterMaxReached = paneAfter.max < 100 && dragPercentage <= 100 - (paneAfter.max + this.sumNextPanesSize(splitterIndex + 1));\n      if (paneBeforeMaxReached || paneAfterMaxReached) {\n        if (paneBeforeMaxReached) {\n          paneBefore.size = paneBefore.max;\n          paneAfter.size = Math.max(100 - paneBefore.max - sums.prevPanesSize - sums.nextPanesSize, 0);\n        } else {\n          paneBefore.size = Math.max(100 - paneAfter.max - sums.prevPanesSize - this.sumNextPanesSize(splitterIndex + 1), 0);\n          paneAfter.size = paneAfter.max;\n        }\n        return;\n      }\n      if (this.pushOtherPanes) {\n        const vars = this.doPushOtherPanes(sums, dragPercentage);\n        if (!vars) return;\n        ({\n          sums,\n          panesToResize\n        } = vars);\n        paneBefore = this.panes[panesToResize[0]] || null;\n        paneAfter = this.panes[panesToResize[1]] || null;\n      }\n      if (paneBefore !== null) {\n        paneBefore.size = Math.min(Math.max(dragPercentage - sums.prevPanesSize - sums.prevReachedMinPanes, paneBefore.min), paneBefore.max);\n      }\n      if (paneAfter !== null) {\n        paneAfter.size = Math.min(Math.max(100 - dragPercentage - sums.nextPanesSize - sums.nextReachedMinPanes, paneAfter.min), paneAfter.max);\n      }\n    },\n    doPushOtherPanes(sums, dragPercentage) {\n      const splitterIndex = this.touch.activeSplitter;\n      const panesToResize = [splitterIndex, splitterIndex + 1];\n      if (dragPercentage < sums.prevPanesSize + this.panes[panesToResize[0]].min) {\n        panesToResize[0] = this.findPrevExpandedPane(splitterIndex).index;\n        sums.prevReachedMinPanes = 0;\n        if (panesToResize[0] < splitterIndex) {\n          this.panes.forEach((pane2, i) => {\n            if (i > panesToResize[0] && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n        }\n        sums.prevPanesSize = this.sumPrevPanesSize(panesToResize[0]);\n        if (panesToResize[0] === void 0) {\n          sums.prevReachedMinPanes = 0;\n          this.panes[0].size = this.panes[0].min;\n          this.panes.forEach((pane2, i) => {\n            if (i > 0 && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[1]].size = 100 - sums.prevReachedMinPanes - this.panes[0].min - sums.prevPanesSize - sums.nextPanesSize;\n          return null;\n        }\n      }\n      if (dragPercentage > 100 - sums.nextPanesSize - this.panes[panesToResize[1]].min) {\n        panesToResize[1] = this.findNextExpandedPane(splitterIndex).index;\n        sums.nextReachedMinPanes = 0;\n        if (panesToResize[1] > splitterIndex + 1) {\n          this.panes.forEach((pane2, i) => {\n            if (i > splitterIndex && i < panesToResize[1]) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n        }\n        sums.nextPanesSize = this.sumNextPanesSize(panesToResize[1] - 1);\n        if (panesToResize[1] === void 0) {\n          sums.nextReachedMinPanes = 0;\n          this.panes[this.panesCount - 1].size = this.panes[this.panesCount - 1].min;\n          this.panes.forEach((pane2, i) => {\n            if (i < this.panesCount - 1 && i >= splitterIndex + 1) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[0]].size = 100 - sums.prevPanesSize - sums.nextReachedMinPanes - this.panes[this.panesCount - 1].min - sums.nextPanesSize;\n          return null;\n        }\n      }\n      return {\n        sums,\n        panesToResize\n      };\n    },\n    sumPrevPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i < splitterIndex ? pane2.size : 0), 0);\n    },\n    sumNextPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i > splitterIndex + 1 ? pane2.size : 0), 0);\n    },\n    findPrevExpandedPane(splitterIndex) {\n      const pane2 = [...this.panes].reverse().find(p => p.index < splitterIndex && p.size > p.min);\n      return pane2 || {};\n    },\n    findNextExpandedPane(splitterIndex) {\n      const pane2 = this.panes.find(p => p.index > splitterIndex + 1 && p.size > p.min);\n      return pane2 || {};\n    },\n    checkSplitpanesNodes() {\n      const children = Array.from(this.container.children);\n      children.forEach(child => {\n        const isPane = child.classList.contains(\"splitpanes__pane\");\n        const isSplitter = child.classList.contains(\"splitpanes__splitter\");\n        if (!isPane && !isSplitter) {\n          child.parentNode.removeChild(child);\n          console.warn(\"Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed.\");\n          return;\n        }\n      });\n    },\n    addSplitter(paneIndex, nextPaneNode, isVeryFirst = false) {\n      const splitterIndex = paneIndex - 1;\n      const elm = document.createElement(\"div\");\n      elm.classList.add(\"splitpanes__splitter\");\n      if (!isVeryFirst) {\n        elm.onmousedown = event => this.onMouseDown(event, splitterIndex);\n        if (typeof window !== \"undefined\" && \"ontouchstart\" in window) {\n          elm.ontouchstart = event => this.onMouseDown(event, splitterIndex);\n        }\n        elm.onclick = event => this.onSplitterClick(event, splitterIndex + 1);\n      }\n      if (this.dblClickSplitter) {\n        elm.ondblclick = event => this.onSplitterDblClick(event, splitterIndex + 1);\n      }\n      nextPaneNode.parentNode.insertBefore(elm, nextPaneNode);\n    },\n    removeSplitter(node) {\n      node.onmousedown = void 0;\n      node.onclick = void 0;\n      node.ondblclick = void 0;\n      node.parentNode.removeChild(node);\n    },\n    redoSplitters() {\n      const children = Array.from(this.container.children);\n      children.forEach(el => {\n        if (el.className.includes(\"splitpanes__splitter\")) this.removeSplitter(el);\n      });\n      let paneIndex = 0;\n      children.forEach(el => {\n        if (el.className.includes(\"splitpanes__pane\")) {\n          if (!paneIndex && this.firstSplitter) this.addSplitter(paneIndex, el, true);else if (paneIndex) this.addSplitter(paneIndex, el);\n          paneIndex++;\n        }\n      });\n    },\n    requestUpdate(_a) {\n      var _b = _a,\n        {\n          target\n        } = _b,\n        args = __objRest(_b, [\"target\"]);\n      const pane2 = this.indexedPanes[target._uid];\n      Object.entries(args).forEach(([key, value]) => pane2[key] = value);\n    },\n    onPaneAdd(pane2) {\n      let index = -1;\n      Array.from(pane2.$el.parentNode.children).some(el => {\n        if (el.className.includes(\"splitpanes__pane\")) index++;\n        return el === pane2.$el;\n      });\n      const min = parseFloat(pane2.minSize);\n      const max = parseFloat(pane2.maxSize);\n      this.panes.splice(index, 0, {\n        id: pane2._uid,\n        index,\n        min: isNaN(min) ? 0 : min,\n        max: isNaN(max) ? 100 : max,\n        size: pane2.size === null ? null : parseFloat(pane2.size),\n        givenSize: pane2.size,\n        update: pane2.update\n      });\n      this.panes.forEach((p, i) => p.index = i);\n      if (this.ready) {\n        this.$nextTick(() => {\n          this.redoSplitters();\n          this.resetPaneSizes({\n            addedPane: this.panes[index]\n          });\n          this.$emit(\"pane-add\", {\n            index,\n            panes: this.panes.map(pane3 => ({\n              min: pane3.min,\n              max: pane3.max,\n              size: pane3.size\n            }))\n          });\n        });\n      }\n    },\n    onPaneRemove(pane2) {\n      const index = this.panes.findIndex(p => p.id === pane2._uid);\n      const removed = this.panes.splice(index, 1)[0];\n      this.panes.forEach((p, i) => p.index = i);\n      this.$nextTick(() => {\n        this.redoSplitters();\n        this.resetPaneSizes({\n          removedPane: __spreadProps(__spreadValues({}, removed), {\n            index\n          })\n        });\n        this.$emit(\"pane-remove\", {\n          removed,\n          panes: this.panes.map(pane3 => ({\n            min: pane3.min,\n            max: pane3.max,\n            size: pane3.size\n          }))\n        });\n      });\n    },\n    resetPaneSizes(changedPanes = {}) {\n      if (!changedPanes.addedPane && !changedPanes.removedPane) this.initialPanesSizing();else if (this.panes.some(pane2 => pane2.givenSize !== null || pane2.min || pane2.max < 100)) this.equalizeAfterAddOrRemove(changedPanes);else this.equalize();\n      if (this.ready) this.$emit(\"resized\", this.panes.map(pane2 => ({\n        min: pane2.min,\n        max: pane2.max,\n        size: pane2.size\n      })));\n    },\n    equalize() {\n      const equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n      this.panes.forEach(pane2 => {\n        pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n    initialPanesSizing() {\n      100 / this.panesCount;\n      let leftToAllocate = 100;\n      let ungrowable = [];\n      let unshrinkable = [];\n      let definedSizes = 0;\n      this.panes.forEach(pane2 => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size !== null) definedSizes++;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      let leftToAllocate2 = 100;\n      if (leftToAllocate > 0.1) {\n        this.panes.forEach(pane2 => {\n          if (pane2.size === null) {\n            pane2.size = Math.max(Math.min(leftToAllocate / (this.panesCount - definedSizes), pane2.max), pane2.min);\n          }\n          leftToAllocate2 -= pane2.size;\n        });\n        if (leftToAllocate2 > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n      }\n    },\n    equalizeAfterAddOrRemove({\n      addedPane,\n      removedPane\n    } = {}) {\n      let equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n      if (addedPane && addedPane.givenSize !== null) {\n        equalSpace = (100 - addedPane.givenSize) / (this.panesCount - 1);\n      }\n      this.panes.forEach(pane2 => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (Math.abs(leftToAllocate) < 0.1) return;\n      this.panes.forEach(pane2 => {\n        if (addedPane && addedPane.givenSize !== null && addedPane.id === pane2.id) ;else pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n    readjustSizes(leftToAllocate, ungrowable, unshrinkable) {\n      let equalSpaceToAllocate;\n      if (leftToAllocate > 0) equalSpaceToAllocate = leftToAllocate / (this.panesCount - ungrowable.length);else equalSpaceToAllocate = leftToAllocate / (this.panesCount - unshrinkable.length);\n      this.panes.forEach((pane2, i) => {\n        if (leftToAllocate > 0 && !ungrowable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        } else if (!unshrinkable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        }\n        pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n      if (Math.abs(leftToAllocate) > 0.1) {\n        this.$nextTick(() => {\n          if (this.ready) {\n            console.warn(\"Splitpanes: Could not resize panes correctly due to their constraints.\");\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    panes: {\n      deep: true,\n      immediate: false,\n      handler() {\n        this.updatePaneComponents();\n      }\n    },\n    horizontal() {\n      this.updatePaneComponents();\n    },\n    firstSplitter() {\n      this.redoSplitters();\n    },\n    dblClickSplitter(enable) {\n      const splitters = [...this.container.querySelectorAll(\".splitpanes__splitter\")];\n      splitters.forEach((splitter, i) => {\n        splitter.ondblclick = enable ? event => this.onSplitterDblClick(event, i) : void 0;\n      });\n    }\n  },\n  beforeDestroy() {\n    this.ready = false;\n  },\n  mounted() {\n    this.container = this.$refs.container;\n    this.checkSplitpanesNodes();\n    this.redoSplitters();\n    this.resetPaneSizes();\n    this.$emit(\"ready\");\n    this.ready = true;\n  },\n  render(h) {\n    return h(\"div\", {\n      ref: \"container\",\n      class: [\"splitpanes\", `splitpanes--${this.horizontal ? \"horizontal\" : \"vertical\"}`, {\n        \"splitpanes--dragging\": this.touch.dragging\n      }]\n    }, this.$slots.default);\n  }\n};\nlet __vue2_render, __vue2_staticRenderFns;\nconst __cssModules$1 = {};\nvar __component__$1 = /* @__PURE__ */normalizeComponent(__vue2_script$1, __vue2_render, __vue2_staticRenderFns, false, __vue2_injectStyles$1, null, null, null);\nfunction __vue2_injectStyles$1(context) {\n  for (let o in __cssModules$1) {\n    this[o] = __cssModules$1[o];\n  }\n}\nvar splitpanes = /* @__PURE__ */function () {\n  return __component__$1.exports;\n}();\nvar render = function () {\n  var _vm = this;\n  var _h = _vm.$createElement;\n  var _c = _vm._self._c || _h;\n  return _c(\"div\", {\n    staticClass: \"splitpanes__pane\",\n    style: _vm.style,\n    on: {\n      \"click\": function ($event) {\n        return _vm.onPaneClick($event, _vm._uid);\n      }\n    }\n  }, [_vm._t(\"default\")], 2);\n};\nvar staticRenderFns = [];\nconst __vue2_script = {\n  name: \"pane\",\n  inject: [\"requestUpdate\", \"onPaneAdd\", \"onPaneRemove\", \"onPaneClick\"],\n  props: {\n    size: {\n      type: [Number, String],\n      default: null\n    },\n    minSize: {\n      type: [Number, String],\n      default: 0\n    },\n    maxSize: {\n      type: [Number, String],\n      default: 100\n    }\n  },\n  data: () => ({\n    style: {}\n  }),\n  mounted() {\n    this.onPaneAdd(this);\n  },\n  beforeDestroy() {\n    this.onPaneRemove(this);\n  },\n  methods: {\n    update(style) {\n      this.style = style;\n    }\n  },\n  computed: {\n    sizeNumber() {\n      return this.size || this.size === 0 ? parseFloat(this.size) : null;\n    },\n    minSizeNumber() {\n      return parseFloat(this.minSize);\n    },\n    maxSizeNumber() {\n      return parseFloat(this.maxSize);\n    }\n  },\n  watch: {\n    sizeNumber(size) {\n      this.requestUpdate({\n        target: this,\n        size\n      });\n    },\n    minSizeNumber(min) {\n      this.requestUpdate({\n        target: this,\n        min\n      });\n    },\n    maxSizeNumber(max) {\n      this.requestUpdate({\n        target: this,\n        max\n      });\n    }\n  }\n};\nconst __cssModules = {};\nvar __component__ = /* @__PURE__ */normalizeComponent(__vue2_script, render, staticRenderFns, false, __vue2_injectStyles, null, null, null);\nfunction __vue2_injectStyles(context) {\n  for (let o in __cssModules) {\n    this[o] = __cssModules[o];\n  }\n}\nvar pane = /* @__PURE__ */function () {\n  return __component__.exports;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/splitpanes/dist/splitpanes.es.js\n");

/***/ })

});